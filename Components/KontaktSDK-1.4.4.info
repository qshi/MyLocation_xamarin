{"Name":"KontaktSDK","Id":3405,"Alias":"KontaktSDK","Description":"# Details\n## Connecting offline and online worlds\nKontakt.io iOS SDK for Xamarin enables quick integration of Kontakt.io iBeacon and Eddystone beacons into any application written on Xamarin platform. It provides the same functionality as the native iOS SDK, giving developers access to all capabilities of Kontakt.io platform.\n\n## Notable Features\n\n* iBeacon monitoring \u0026 ranging\n* Eddystone beacons detection\n* Beacon Health reporting\n* API Client\n* Configuring Kontakt.io devices\n\n## Learn More\nFor any further details please check the Getting Started guide or visit the [Developer Section](https://developer.kontakt.io/) on Kontakt.io web site.\n\n## Buy Beacons\nIf you want to start your new beacon-based projects, but don\u0027t have any Kontakt.io devices yet, you can find a variety of Development Kits in [Kontakt.io Web Store](https://store.kontakt.io/).\n\n## Release Notes\n### 1.4.4 (2017-03-29)\n\n* Turning Off Power Saving\n* Bug fixes and other improvements\n\n### 1.4.3 (2017-03-22)\n\n* Secure regions fixes for large deployments\n* New API models for Kontakt.io Triggers\n* Other fixes and improvements\n\n### 1.4.0 (2017-02-01)\n\n* Initial release (version number is tied with the version of the underlying native Kontakt.io iOS SDK)","Version":"1.4.4","Summary":"The Kontakt.io SDK for managing beacons","QuickStart":"#Getting started with Kontakt.io iOS SDK for Xamarin\n\nThis document will briefly describe how you can use our SDK on Xamarin Platform.\n\n## Configuration\n\nAs a first step, you should set your API key in `AppDelegate`\u0027s `FinishedLaunching` method:\n\n```csharp\nKontakt.APIKey = \"YOUR-API-KEY\";\n```\n\n## Beacon Manager\n\n`KTKBeaconManager` is the main class responsible for handling iBeacon monitoring and ranging. \n\n### Permissions\n\niBeacon support on iOS is a part of Location Services. Kontakt.io iOS SDK, when it comes to monitoring and ranging, is built on top of Core Location. Because of this, before you start monitoring you need to make sure your app has the necessary permission to use Location Services and ask for them if needed.\n\nDue to that, you must specify `NSLocationAlwaysUsageDescription` or `NSLocationWhenInUseUsageDescription` in you `info.plist` file with a description that will be prompted to your users. Then while using BeaconManager, you should call either `RequestLocationAlwaysAuthorization` or `RequestLocationWhenInUseAuthorization` method first.\n\n### Example\n\nThe example below presents beacons monitoring \u0026 ranging functionality.\n\n```csharp\nKTKBeaconManager beaconManager;\nKTKBeaconRegion beaconRegion;\n\npublic override void ViewDidLoad()\n{\n\tbase.ViewDidLoad();\n\n\t// Initialize beacon manager\n\tbeaconManager = new KTKBeaconManager(new BeaconManagerDelegate());\n\tbeaconManager.RequestLocationAlwaysAuthorization();\n\n\t// Create beacon region - Kontakt.io proximity UUID by default\n\tNSUuid proximityUUUID = new NSUuid(\"f7826da6-4fa2-4e98-8024-bc5b71e0893e\");\n\tbeaconRegion = new KTKBeaconRegion(proximityUUUID, \"region-identifier\");\n}\n\t\t\n...\n\nclass BeaconManagerDelegate : KTKBeaconManagerDelegate\n{\n\tpublic override void MonitoringDidFailForRegion(KTKBeaconManager manager, KTKBeaconRegion region, Foundation.NSError error)\n\t{\n\t\tConsole.WriteLine(\"Monitoring beacons failed, error = \" + error.Description);\n\t}\n\n\tpublic override void DidStartMonitoringForRegion(KTKBeaconManager manager, KTKBeaconRegion region)\n\t{\n\t\tConsole.WriteLine(\"Beacon monitoring sucessfully started for region: \" + region.Description);\n\t}\n\n\tpublic override void DidEnterRegion(KTKBeaconManager manager, KTKBeaconRegion region)\n\t{\n\t\tConsole.WriteLine(\"Entered region: \" + region.Description);\n\t}\n\n\tpublic override void DidExitRegion(KTKBeaconManager manager, KTKBeaconRegion region)\n\t{\n\t\tConsole.WriteLine(\"Abandoned region: \" + region.Description);\n\t}\n\n\tpublic override void DidRangeBeacons(KTKBeaconManager manager, CoreLocation.CLBeacon[] beacons, KTKBeaconRegion region)\n\t{\n\t\tConsole.WriteLine(\"Ranged \" + beacons.Length + \" beacons\");\n\t}\n}\n```\n\n## Eddystone Manager\n\nSince Core Location is not aware of Eddystone beacons, Kontakt.io iOS SDK has a separate manager for detecting Eddystone beacons. In order to start working with Eddystone beacons you need to initialize a `KTKEddystoneManager` instance with a delegate object that conforms to `KTKEddystoneManagerDelegate` protocol.\n\n```csharp\nKTKEddystoneManager eddystoneManager;\nKTKEddystoneRegion eddystoneRegion;\n\npublic override void ViewDidLoad()\n{\n\tbase.ViewDidLoad();\n\n\t// Initialize eddystone manager\n\teddystoneManager = new KTKEddystoneManager(new EddystoneManagerDelegate());\n\n\t// Create eddystone region - Kontakt.io region by default\n\teddystoneRegion = new KTKEddystoneRegion(\"f7826da6bc5b71e0893e\", null);\n\t\n\t// Start eddystones discovery\n\teddystoneManager.StartEddystoneDiscoveryInRegion(eddystoneRegion);\n}\n\n...\n\nclass EddystoneManagerDelegate : KTKEddystoneManagerDelegate\n{\n\tpublic override void DidFailToStartDiscovery(KTKEddystoneManager manager, NSError error)\n\t{\n\t\tConsole.WriteLine(\"Eddystone discovery failed with error: \" + error.Description);\n\t}\n\n\tpublic override void DidDiscoverEddystones(KTKEddystoneManager manager, NSSet\u003cKTKEddystone\u003e eddystones, KTKEddystoneRegion region)\n\t{\n\t\tConsole.WriteLine(\"Discovered \" + eddystones.Count + \" eddystones\");\n\t}\n}\n```\n\n## Nearby Devices Manager\n\nAn object in your app responsible for detecting and connecting to nearby Kontakt.io devices needs to be an instance of a `KTKDevicesManager` class. Under the hood `KTKDevicesManager` depends on Core Bluetooth to find Bluetooth devices and establish connection with your beacons when needed.\n\nIn order to detect nearby devices, you can use sample code below:\n\n```csharp\nKTKDevicesManager devicesManager;\n\nprotected ViewController(IntPtr handle) : base(handle) { }\n\npublic override void ViewDidLoad()\n{\n\tbase.ViewDidLoad();\n\n\t// Initialize devices manager\n\tdevicesManager = new KTKDevicesManager(new DevicesManagerDelegate());\n\t\n\t// Start nearby devices discovery\n\tdevicesManager.StartDevicesDiscoveryWithInterval(2.0);\n}\n\n...\n\nclass DevicesManagerDelegate : KTKDevicesManagerDelegate\n{\n\tpublic override void DidFailToStartDiscovery(KTKDevicesManager manager, Foundation.NSError error)\n\t{\n\t\tConsole.WriteLine(\"Devices discovery failed with error: \" + error.Description);\n\t}\n\n\tpublic override void DidDiscoverDevices(KTKDevicesManager manager, KTKNearbyDevice[] devices)\n\t{\n\t\tConsole.WriteLine(\"Discovered \" + devices.Length + \" nearby devices\");\n\t}\n}\n```\n\n## Applying a new configuration\n\nIf you want to change settings of your beacons, you need to use a connection to a beacon to write a new configuration, which is an instance of `KTKDeviceConfiguration` class. A new configuration can be made on the go, directly in your own app. It\u0027s just a matter of setting up a `KTKDeviceConfiguration` and then providing new values to that object\u0027s properties that correspond with beacon settings that you want to adjust. Another approach is to create a configuration through [Web Panel](https://support.kontakt.io/hc/en-gb/articles/201607891) or API. Please check examples from *API Client section* to learn how to get pending configurations from Kontakt.io Cloud. \n\nBelow you can find simple example how to apply new configuration to a device:\n\n```csharp\nclass DevicesManagerDelegate : KTKDevicesManagerDelegate\n{\n\tpublic override void DidDiscoverDevices(KTKDevicesManager manager, KTKNearbyDevice[] devices)\n\t{\n\t\tKTKNearbyDevice device = LookForDevice(devices, \"abcd\");\n\t\tif (device != null)\n\t\t{\n\t\t\t// Stop discovery and invalidate timer if found device\n\t\t\tvc.devicesManager.StopDevicesDiscovery();\n\n\t\t\t// Create sample configuration\n\t\t\tKTKDeviceConfiguration configuration = new KTKDeviceConfiguration(\"abcd\");\n\t\t\tconfiguration.Major = 111;\n\t\t\tconfiguration.Minor = 222;\n\n\t\t\t// Connect to device if found\n\t\t\tKTKDeviceConnection connection = new KTKDeviceConnection(device);\n\t\t\tconnection.WriteConfiguration(configuration, (synchronized, appliedConfig, error) =\u003e \n\t\t\t{\n\t\t\t\t// handle response\n\t\t\t\tif (error == null) \n\t\t\t\t{\n\t\t\t\t\tConsole.WriteLine(\"Configuration applied\");\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tKTKNearbyDevice LookForDevice(KTKNearbyDevice[] devices, string uniqueID)\n\t{\n\t\tforeach (KTKNearbyDevice device in devices) \n\t\t{\n\t\t\tif (device.UniqueID == uniqueID)\n\t\t\t{\n\t\t\t\treturn device;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n}\n```\n\n## API Client\n\nThe Kontakt.io Cloud API provides a series of resources to query/update our Cloud Services. Every information that you can either access or modify in Kontakt.io Web Panel is also available through API for our backend.\n\nClass responsible for communication with that API is the `KTKCloudClient`. Most data that you can get from or modify through an API call has an equivalent in one of SDK classes. Here is an example:\n\n```csharp\nKTKCloudClient cloudClient = new KTKCloudClient();\n\n// Fetch devices from API\ncloudClient.GET(\"device\", null, (response, error) =\u003e \n{\n\t// handle response/error\n});\n\n// Fetch pending configs from API, parameters required\nvar parameters = new NSDictionary(\"deviceType\", \"beacon\");\ncloudClient.GET(\"config\", parameters, (response, error) =\u003e \n{\n\t// handle response/error\n});\n\n// Fetch managers from API\ncloudClient.GET(\"manager\", null, (response, error) =\u003e \n{\n\t// handle response/error\n});\n```","Hash":"9cbf65ac9d012de6000921addf713c8e","TargetPlatforms":["ios","ios-unified"],"TrialHash":null}